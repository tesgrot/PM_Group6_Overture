class Steam_Boiler

instance variables

	now : real;
	qe	:	real; -- kg, current water quantity in boiler
	public pump_state		:	nat; -- 1=open, 0=closed
	public valve_state	:	nat; -- 1=running, 0=stopped

values

	C	: real = 1000; -- kg, max water capacity of steam boiler
	P	:	real = 10; -- kg/second, pump throughput
	V	:	real = 50; -- kg/second, valve throughput

operations

	public Steam_Boiler: () ==> Steam_Boiler
	Steam_Boiler() == (
		now := 0;
		qe	:= 500;
		valve_state	:= 0;
		pump_state	:= 0;
	);
	-- setters (executed instanteneously; time is not advanced
	public ValveOn: () ==> ()
	ValveOn() == duration (0) (
		MySystem`boiler.valve_state := 1;
	);
	
	public ValveOff: () ==> ()
	ValveOff() == duration (0) (
		MySystem`boiler.valve_state := 0;
	);
	
	public PumpOn: () ==> ()
	PumpOn() == duration (0) (
		MySystem`boiler.pump_state := 1;
	);
	
	public PumpOff: () ==> ()
	PumpOff() == duration (0) (
		MySystem`boiler.pump_state := 0;
	);
	
	-- evolution of water level
	public Step: (real) ==> ()
	Step(delta) == duration (0) (
		
		--COMPUTE NEW VALUES AFTER DELTA TIME UNITS HAVE PASSED
		-- time_factor assumed to be in seconds
		dcl delta_qe : real := (pump_state * P) - (valve_state * V);
		qe := qe + delta_qe * delta;
		
		now := now + delta;
		
		-- boundary condition: take the max of next_qe and 0,
		-- the boiler can at most be empty
		if(qe < 0) then (qe := 0); -- boiler empty
		
	)
	post 0 <= qe and qe <= C;

end Steam_Boiler