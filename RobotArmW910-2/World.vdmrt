class World

instance variables
	io : IO := new IO();

values

operations

	public Scenario1 : () ==> (seq of (real * real))-- * Robot_Arm`MotorState * real))
		Scenario1() == (
--			start(MySystem`arm);
			start(MySystem`controller);
			start(MySystem`sensor);
			start(MySystem`motor);
			MySystem`controller.SetTargetAngle(80);
			MySystem`controller.IsFinished();
	skip;
			return MySystem`arm.data_history;
		);

	public Scenario2 : () ==> (seq of (real * real))-- * Robot_Arm`MotorState * real))
		Scenario2() == (
--			start(MySystem`arm);
			start(MySystem`controller);
			start(MySystem`sensor);
			start(MySystem`motor);
			MySystem`controller.SetTargetAngle(20);
			MySystem`controller.IsFinished();
	skip;
			return MySystem`arm.data_history;
		);

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
--	public echoLabels : () ==> ()
--	echoLabels() == (
--		dcl str : seq of char := "inst\tnow\tenv_m_s\tenv_t\tenv_q\tctl_m_s\tctl_t\tctl_q\n";
--		def - = io.echo(str) in skip;
--	);
--	
--	public echoState : (nat) ==> ()
--	echoState(counter) == (
--		dcl str : seq of char := "";
--		str := str ^ VDMUtil`val2seq_of_char[nat](counter);
--		str := str ^ "\t";
--		str := str ^ VDMUtil`val2seq_of_char[real](
--			MySystem`arm.now);
--		str := str ^ "\t";
--		str := str ^ VDMUtil`val2seq_of_char[nat](
--			MySystem`arm.env_motor_state);
--		str := str ^ "\t";
--		str := str ^ VDMUtil`val2seq_of_char[real](
--			MySystem`arm.env_t);
--		str := str ^ "\t";
--		str := str ^ VDMUtil`val2seq_of_char[real](
--			MySystem`arm.env_q);
--		str := str ^ "\t";
--		str := str ^ VDMUtil`val2seq_of_char[nat](
--			MySystem`controller.ctl_motor_state);
--		str := str ^ "\t";
--		str := str ^ VDMUtil`val2seq_of_char[real](
--			MySystem`controller.ctl_t);
--		str := str ^ "\t";
--		str := str ^ VDMUtil`val2seq_of_char[real](
--			MySystem`controller.ctl_q);
--		str := str ^ "\n";
--		def - = io.echo(str) in skip;
--	);
--	
--	public Scenario1 : () ==> (seq of (nat * real * nat * real))
--		Scenario1() == (
--			---start(MySystem`arm);
--			MySystem`controller.MotorOn();
--			MySystem`arm.Step(4);
--			MySystem`controller.MonitorAngle();
--			MySystem`controller.EnsureSafeRange();
--			MySystem`controller.MotorOff();
--			MySystem`arm.IsFinished();
--			return MySystem`arm.data_history;
--		);
--	
--	public Scenario2 : () ==> bool
--		Scenario2() == (
--			MySystem`controller.MotorOn();
--			MySystem`controller.MotorOff();
--			MySystem`arm.Step(4);
--			MySystem`controller.MonitorAngle();
--			MySystem`controller.EnsureSafeRange();
--			MySystem`controller.MotorOff();
--			return true;
--		);
--	
--	public Scenario6 : () ==> bool Scenario6() == (
--		echoLabels();
--		MySystem`controller.MotorOn();
--		MySystem`controller.TorqueNeg();
--		echoState(0);
--		MySystem`arm.Step(1); -- angle goes to range [M1, N1] MySystem`controller.MotorOff();
--		echoState(1);
--		MySystem`controller.MonitorAngle(); MySystem`controller.EnsureSafeRange(); -- ctl: MotorOn + TorquePos echoState(2);
--		MySystem`arm.Step(6); -- angle within safe range [N1, N2] echoState(3);
--		MySystem`controller.MonitorAngle(); MySystem`controller.EnsureSafeRange(); -- ctl: MotorOff echoState(4);
--		MySystem`arm.Step(2); -- no change, motor off
--		echoState(5);
--		return true;
--	);
--	
--	public Scenario7 : () ==> bool Scenario7() == (
--		echoLabels();
--		MySystem`controller.MotorOn(); MySystem`controller.TorquePos();
--		echoState(0);
--		MySystem`arm.Step(1); -- angle goes to safe range [N1, N2] echoState(1);
--		MySystem`controller.MonitorAngle(); MySystem`controller.EnsureSafeRange(); -- ctl: MotorOff echoState(2);
--		return true;
--	);


end World