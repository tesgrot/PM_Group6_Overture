class Robot_Arm

instance variables

	now : real;
	q	:	real; -- radians, current angle of joint
	public motor_state		:	nat; -- 1=active, 0=inactive
	t : real; -- "torque" - specifies the up / down movement

values

	-- m	: real = 1.2; -- kg, mass of the end effector
	-- g	:	real = -9.81; -- m/second^2, acceleration due to gravity
	-- r	:	real = 0.8; -- m, length of link

operations

	public Robot_Arm: () ==> Robot_Arm
	Robot_Arm() == (
		now := 0;
		q	:= 0;
		motor_state	:= 0;
		t := 0.1; -- ~5deg
	);
	-- setters (executed instanteneously; time is not advanced
	public MotorOn: () ==> ()
	MotorOn() == duration (0) (
		MySystem`arm.motor_state := 1;
	);
	
	public MotorOff: () ==> ()
	MotorOff() == duration (0) (
		MySystem`arm.motor_state := 0;
	);
	
	public SwitchTorque: () ==> ()
	SwitchTorque() == duration (0) (
		MySystem`arm.t := -1 * t;
	);
	
	-- evolution of angle
	public Step: (real) ==> ()
	Step(delta) == duration (0) (
		
		--COMPUTE NEW VALUES AFTER DELTA TIME UNITS HAVE PASSED
		-- time_factor assumed to be in seconds
		dcl delta_q : real := (motor_state * t);
		q := q + delta_q * delta;
		
		-- tg := m * g * r * MATH`cos(q);
		
		now := now + delta;
		
--		-- boundary condition: take the max of next_qe and 0,
--		-- the boiler can at most be empty
--		if(qe < 0) then (qe := 0); -- boiler empty
		
	)
	-- post 0 <= qe and qe <= C;

end Robot_Arm