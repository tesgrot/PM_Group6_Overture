class World

instance variables
	io : IO := new IO();

values

operations
	
	public echoLabels : () ==> ()
	echoLabels() == (
		dcl str : seq of char := "inst\tenv_m_s\tenv_t\tenv_q\tctl_m_s\tctl_t\tctl_q\n";
		def - = io.echo(str) in skip;
	);
	
	public echoState : (nat) ==> ()
	echoState(counter) == (
		dcl str : seq of char := "";
		str := str ^ VDMUtil`val2seq_of_char[nat](counter);
		str := str ^ "\t";
		str := str ^ VDMUtil`val2seq_of_char[nat](
			MySystem`arm.env_motor_state);
		str := str ^ "\t";
		str := str ^ VDMUtil`val2seq_of_char[real](
			MySystem`arm.env_t);
		str := str ^ "\t";
		str := str ^ VDMUtil`val2seq_of_char[real](
			MySystem`arm.env_q);
		str := str ^ "\t";
		str := str ^ VDMUtil`val2seq_of_char[nat](
			MySystem`controller.ctl_motor_state);
		str := str ^ "\t";
		str := str ^ VDMUtil`val2seq_of_char[real](
			MySystem`controller.ctl_t);
		str := str ^ "\t";
		str := str ^ VDMUtil`val2seq_of_char[real](
			MySystem`controller.ctl_q);
		str := str ^ "\n";
		def - = io.echo(str) in skip;
	);
	
	public Scenario1 : () ==> (seq of (nat * real * nat * real))
		Scenario1() == (
			--Commented due to infinite loop error occuring when threads are initialised
			--MySystem`arm.setFinalSimulationTime(100);
			--start(MySystem`controller);
			--start(MySystem`arm);
			MySystem`arm.RecordState();
			MySystem`controller.MotorOn();
			MySystem`arm.RecordState();
			MySystem`arm.Step(4);
						MySystem`arm.RecordState();
			MySystem`controller.MonitorAngle();
						MySystem`arm.RecordState();
			MySystem`controller.EnsureSafeRange();
						MySystem`arm.RecordState();
			MySystem`controller.MotorOff();
						MySystem`arm.RecordState();
			MySystem`arm.IsFinished();
						MySystem`arm.RecordState();
			return MySystem`arm.data_history;
		);
	
end World